<?php 	include 'includes/session.php';?><!DOCTYPE html><html lang="en">	<head>		<?php include 'includes/links.php'; ?>				<style>			#info {			color: #ffffff;			position: absolute;			top: 90%;			width: 100%;			text-align: center;			z-index: 100;			display: block;			}						body {			font-family: Helvetica, Arial, sans-serif;			font-size: 12px;			margin: 0px;			overflow: hidden;			background-size: cover;			background: #70bg32;			background-repeat: no-repeat;			background: linear-gradient(to bottom,  #272928 50%,#272928 82%); 			margin: 0px;			overflow-x: hidden;			}						#visible-input{			width: 150px;			height: 20px;			font-family: Helvetica, Arial, sans-serif;			}			@media (max-width:768px) {			.form {			display:none;			}			}					</style>		<script src="build/three.min.js"></script>		<script src="js/controls/OrbitControls.js"></script>		<script src="js/loaders/TGALoader.js"></script>	</head>	<body>				<?php include 'includes/header.php'; ?>				<?php			require('includes/config.php');						$getid = $_GET['id'];						$stmt =  $conn->prepare("select * from images WHERE id= :getid");			$stmt->bindValue(':getid', $getid);			$stmt->execute();			$result = $stmt->fetchAll();						$count_stmt  = $conn->prepare("UPDATE images SET views = views + 1 WHERE id= :getid");			$count_stmt->bindValue(':getid', $getid);			$count_stmt->execute();						$count_result= $count_stmt->fetchAll();						foreach ($result as $row)  {				$current_counts = $row['views'];				$new_count = $current_counts +1;			}						echo"<input type='hidden' name='jointcolor' id='jointcolor' value=".$row['jointcolor'].">";			echo"<input type='hidden' name='bodycolor' id='bodycolor' value=".$row['bodycolor'].">";			echo"<input type='hidden' name='textureid' id='textureid' value=".$_GET['id'].">";						$title = htmlspecialchars($row["title"], ENT_QUOTES, 'UTF-8');			$artist = htmlspecialchars($row["artist"], ENT_QUOTES, 'UTF-8');			$textureArtist = htmlspecialchars($row["textureArtist"], ENT_QUOTES, 'UTF-8');						$userid = $row["user_id"];			$postid = $row["id"];		?>				<div class="login-page textureinfo">			<div class="form">				<form class="login-form" method ="post" enctype = "multipart/form-data" >					<?php						$sqlurl = $row["image"];												if (substr($sqlurl, 0, 3) != 'dat'){							$sqlurl = "data:image;base64,".$row["image"];						}												$headflaturl = "data:image;base64,".$row["headtexture"];						list($width, $height) = getimagesize($headflaturl);												echo"<h2> <span class='yellowtxt' id='h2title'>".$title."</span></h2>";						echo"<p class='message' id='h2artist'>Created by: ".$textureArtist."</br></p>";						echo"<input type='hidden' name='title' id='title' value=".$title .">";						echo"<input type='hidden' name='artist' id='artist' value=".$artist .">";						?>					</br>					<div class="texturescrollbar" id="style-2">						<?php							$textureid = (int)$_GET['id'];							if (isset($_SESSION['Username'])) {								$userid = $_SESSION['user_id'];								$checkfields =  $conn->prepare("SELECT * 								FROM texture_favs								WHERE user =:userid								AND texture =:textureid");								$checkfields->bindValue(':userid', $userid);								$checkfields->bindValue(':textureid', $textureid);								$checkfields->execute();								$count = $checkfields->rowCount();																if($userid== $row["user_id"]){								?>								<button type="button" class="btn btn btn-primary"  onclick="editTexture()"><i  aria-hidden="true"></i> Edit</button>								<button type="button" class="btn"  onclick="deleteTexture()"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</button>  </br></br>								<?php									}								if ($checkfields->rowCount() == 0) {								?>								<a href="favourite.php?type=texture&id=<?php echo $getid?>" class="btn btn-block btn-primary btn-warning"><i class="fa fa-star-o" aria-hidden="true"></i> Add to Favourites</a>								<?php									}else{								?>	<a href="favourite.php?type=texture&id=<?php echo $getid?>" class="btn btn-block  btn-default"><i class="fa fa-check" aria-hidden="true"></i> Favourited</a>								<?php								}							}						?>						<br />						<p id="demo"></p>						<span class="greytxt pageheading2">Details</span>						<table class="table">							<thead>								<tr>									<th></th>									<th></th>								</tr>							</thead>							<tbody>								<tr>									<td>Created by </td>									<td><?php echo $textureArtist; ?></td>								</tr>								<td>Uploaded by </td>								<td><?php echo $artist; ?></td>							</tr>							<tr>								<td>Submitted on </td>								<td><?php echo $row["UploadDate"]; ?></td>							</tr>						</tbody>					</table>					Forum Code:					<input type="text" id="visible-input" value="[texturepreview='500']<?php echo $getid?>[/texturepreview]"size="2"/>					<button type="button" onclick="copyBBCode()" id="visible-button" >Copy</button>										<br><br>					<span class="greytxt pageheading2">Stats</span>					<table class="table">						<thead>							<tr>								<th> </th>								<th></th>							</tr>						</thead>						<tbody>							<tr>								<td>views</td>								<td><?php echo $row["views"]; ?></td>							</tr>							<tr>								<?php 									$countfields =  $conn->prepare("SELECT * 									FROM texture_favs									WHERE texture =:textureid");									$countfields->bindValue(':textureid', $textureid);									$countfields->execute();									$count = $countfields->rowCount();								?>								<td>favourites</td>								<td><?php echo 	$count ?> </td>							</tr>							<?php if($row["sharing"]=="public"){ ?>								<tr>									<td>downloads</td>									<td><?php echo $row["downloads"] ?></td>								</tr>							<?php } ?>						</tbody>					</table>				</div>							</form>		</div>	</div>	<div id="result"></div></div><script>	function editTexture(articleId) {		window.location = "edittexture.php?id=<?php echo $getid?>"	}		function deleteTexture() {		var txt;		var r = confirm("Are you sure?");		if (r == true) {			window.location = "deletetexture.php?id=<?php echo $getid?>"			} else {		}	}		function copyBBCode() {		var copyText = document.getElementById("visible-input");		copyText.select();		document.execCommand("Copy");	}		var loader = new THREE.ObjectLoader();	var camera, scene, renderer;		this.dom = document.createElement( 'div' );		this.width = 500;	this.height = 500;		this.load = function ( json ) {		renderer = new THREE.WebGLRenderer( {  alpha: true,antialias: true ,		preserveDrawingBuffer   : true  } );		renderer.setClearColor( 0x000000, 0 );		renderer.setPixelRatio( window.devicePixelRatio );				if ( json.project.gammaInput ) renderer.gammaInput = true;		if ( json.project.gammaOutput ) renderer.gammaOutput = true;		if ( json.project.shadows ) {			renderer.shadowMap.enabled = true;					}				this.dom.appendChild( renderer.domElement );		this.setScene( loader.parse( json.scene ) );		this.setCamera( loader.parse( json.camera ) );	};		this.setCamera = function ( value ) {		camera = value;		camera.aspect = this.width / this.height;		camera.updateProjectionMatrix();	};		this.setScene = function ( value ) {		scene = value;		};		this.setSize = function ( width, height ) {		this.width = width;		this.height = height;		if ( camera ) {			camera.aspect = this.width / this.height;			camera.updateProjectionMatrix();		}				if ( renderer ) {			renderer.setSize( width, height );		}	};		this.updatetexture = function(){		}		var prevTime, request;		function animate( time ) {		request = requestAnimationFrame( animate );		renderer.render( scene, camera );		prevTime = time;	}		this.play = function () {		request = requestAnimationFrame( animate );		prevTime = performance.now();	};		this.stop = function () {		cancelAnimationFrame( request );	};		this.dispose = function () {		while ( this.dom.children.length ) {			this.dom.removeChild( this.dom.firstChild );		}				renderer.dispose();		camera = undefined;		scene = undefined;		renderer = undefined;			};		var player;		init();		var loader = new THREE.ObjectLoader();	var camera, scene, renderer;	var controls;	var isMouseDown = false;		var events = {};		function init() {		window.addEventListener('mousedown', onMouseDown);		window.addEventListener('mouseup', onMouseUp);			    function onMouseDown(){			isMouseDown = true;		}				function onMouseUp(){			isMouseDown = false;		}				if(scene==null){			var loader = new THREE.FileLoader();			var loadcounter = 0; 			var isHeadTexture = 0;			<?php 				class ToriPart {					public function __construct($Files, $target_name, $rowName) {						$this->Files = $Files;						$this->target_name = $target_name;						$this->rowName = $rowName;					}				}								$head = new ToriPart("inputimage", "head", "headtexture");				$groin = new ToriPart("groin", "groin", "grointexture");				$r_thigh = new ToriPart("r_thigh", "r_thigh", "r_thightexture");				$r_leg = new ToriPart("r_leg", "r_leg", "r_legtexture");				$r_foot = new ToriPart("r_foot", "r_foot", "r_foottexture");				$l_foot = new ToriPart("l_foot", "l_foot", "l_foottexture");				$l_leg = new ToriPart("l_leg", "l_leg", "l_legtexture");				$l_thigh = new ToriPart("l_thigh", "l_thigh", "l_thightexture");				$r_triceps = new ToriPart("r_triceps", "r_triceps", "r_tricepstexture");				$r_hand = new ToriPart("r_hand", "r_hand", "r_handtexture");				$r_biceps = new ToriPart("r_biceps", "r_biceps", "r_bicepstexture");				$stomach = new ToriPart("stomach", "stomach", "stomachtexture");				$chest = new ToriPart("chest", "chest", "chesttexture");				$breast = new ToriPart("breast", "breast", "breasttexture");				$r_pecs = new ToriPart("r_pecs", "r_pecs", "r_pecstexture");						$l_hand = new ToriPart("l_hand", "l_hand", "l_handtexture");				$l_triceps = new ToriPart("l_triceps", "l_triceps", "l_tricepstexture");				$l_biceps = new ToriPart("l_biceps", "l_biceps", "l_bicepstexture");				$l_pecs = new ToriPart("l_pecs", "l_pecs", "l_pecstexture");								$l_knee = new ToriPart("l_knee", "l_knee", "l_kneetexture");				$l_glute = new ToriPart("l_glute", "l_glute", "l_glutetexture");				$l_hip = new ToriPart("l_hip", "l_hip", "l_hiptexture");				$r_hip = new ToriPart("r_hip", "r_hip", "r_hiptexture");				$r_knee = new ToriPart("r_knee", "r_knee", "r_hiptexture");				$r_glute = new ToriPart("r_glute", "r_glute", "r_glutetexture");				$l_ankle = new ToriPart("l_ankle", "l_ankle", "l_ankletexture");				$r_ankle = new ToriPart("r_ankle", "r_ankle", "r_ankletexture");				$l_wrist = new ToriPart("l_wrist", "l_wrist", "l_wristtexture");				$r_wrist = new ToriPart("r_wrist", "r_wrist", "r_wristtexture");				$l_elbow = new ToriPart("l_elbow", "l_elbow", "l_elbowtexture");				$l_shoulder = new ToriPart("l_shoulder", "l_shoulder", "l_shouldertexture");				$r_shoulder = new ToriPart("r_shoulder", "r_shoulder", "r_shouldertexture");				$r_elbow = new ToriPart("r_elbow", "r_elbow", "r_elbowtexture");				$r_pec = new ToriPart("r_pec", "r_pec", "r_pectexture");				$l_pec = new ToriPart("l_pec", "l_pec", "l_pectexture");				$abs = new ToriPart("abs", "abs", "abstexture");				$lumbar = new ToriPart("lumbar", "lumbar", "lumbartexture");				$chestJoint = new ToriPart("chestJoint", "chestJoint", "chestjointtexture");				$neck = new ToriPart("neck", "neck", "necktexture");								$bodyParts = array($groin,$r_thigh,$r_leg,$r_foot,$l_foot,$l_leg,$l_thigh,$r_hand,$r_triceps,$r_biceps,$stomach,$chest,$breast,$r_pecs,$l_hand,$l_triceps,$l_biceps,				$head,$l_pecs);								$jointParts = array($neck,$r_hip,$r_knee,$r_ankle,$l_ankle,$l_knee,$l_hip,$r_wrist,$r_elbow,$abs,$lumbar,$l_wrist,$l_elbow,$l_glute,				$r_glute,$l_shoulder,$l_pec,$r_pec,$r_shoulder,$chestJoint);								$loadcounter = 0;				$isHeadTexture = 0;								foreach($bodyParts as $body){					if(!file_exists('uploads/'.$row['user_id'].'/'.$row['id'].'/'.$body->target_name.'.'.$row[$body->rowName])){						$loadcounter ++;					}				}				foreach($jointParts as $joint){					if(!file_exists('uploads/'.$row['user_id'].'/'.$row['id'].'/'.$joint->target_name.'.'.$row[$joint->rowName])){						$loadcounter ++;					}				}				if(file_exists('uploads/'.$row["user_id"].'/'.$row["id"].'/head.'.$row["headtexture"])){					$isHeadTexture ++;				}				echo'isHeadTexture = '.$isHeadTexture.';';				echo'loadcounter = '.$loadcounter.';';			?>			var appToUse;			if(loadcounter >=38 ){				if(isHeadTexture ==1 ){					appToUse="apphead.json"					}else{					appToUse="app5.json"				}				}else{				appToUse="app5.json"			}						loader.load( appToUse, function ( text ) {				load( JSON.parse( text ) );				setSize( window.innerWidth, window.innerHeight );								play();								document.body.appendChild(dom );				document.body.lastChild.firstElementChild.id = "scene";				this.dom = document.createElement( 'div' );								this.width = 500;				this.height = 500;								this.load = function ( json ) {										renderer = new THREE.WebGLRenderer( {  alpha: true,antialias: true ,					preserveDrawingBuffer   : true , canvas : document.getElementById('scene')} );					renderer.setClearColor( 0x000000, 0 );					renderer.setPixelRatio( window.devicePixelRatio );										if ( json.project.gammaInput ) renderer.gammaInput = true;					if ( json.project.gammaOutput ) renderer.gammaOutput = true;					if ( json.project.shadows ) {						renderer.shadowMap.enabled = true;					}										this.dom.appendChild( renderer.domElement );					this.setScene( loader.parse( json.scene ) );					this.setCamera( loader.parse( json.camera ) );				};								this.setCamera = function ( value ) {					camera = value;					camera.aspect = this.width / this.height;					camera.updateProjectionMatrix();				};								var controls = new THREE.OrbitControls( camera, renderer.domElement );				controls.maxPolarAngle = Math.PI * 0.52;				controls.minPolarAngle = Math.PI * 0.15;				controls.minDistance = 1;				controls.maxDistance = 20;								this.setScene = function ( value ) {					scene = value;				};								var canvas = document.getElementById( "scene" );				var windowHalfX = window.innerWidth / 2;				var windowHalfY = window.innerHeight / 2;								this.setSize = function ( width, height ) {					windowHalfX = window.innerWidth / 2;					windowHalfY = window.innerHeight / 2;					camera.aspect = window.innerWidth / window.innerHeight;					camera.updateProjectionMatrix();					renderer.setSize( window.innerWidth, window.innerHeight );					};								window.addEventListener( 'resize', function () {					setSize( window.innerWidth, window.innerHeight );				} );								light = new THREE.HemisphereLight(0xddeeff, 0x0f0e0d,0.7)								shadowLight = new THREE.DirectionalLight(0xffffff, .6);				shadowLight.position.set(100,70, -200);				shadowLight.castShadow = true;								backLight = new THREE.DirectionalLight(0xffffff, .4);				backLight.position.set(-100, 150, -50);				backLight.castShadow = true;								var hemilight = new THREE.HemisphereLight(0xffffff, 0xffffff,0.1)								scene.add(hemilight);				scene.add(backLight);				scene.add(light);				scene.add(shadowLight);								scene.background = null;								var head =  scene.getObjectByName("Head");				var neck =  scene.getObjectByName("Neck");								if(appToUse=="app5.json"){					var r_hip =  scene.getObjectByName("R_Hip");					var r_knee =  scene.getObjectByName("R_Knee");					var r_ankle =  scene.getObjectByName("R_Ankle");					var l_ankle =  scene.getObjectByName("L_Ankle");					var l_knee =  scene.getObjectByName("L_Knee");					var l_hip =  scene.getObjectByName("L_Hip");					var r_wrist =  scene.getObjectByName("R_Wrist");					var r_elbow =  scene.getObjectByName("R_Elbow");					var r_shoulder =  scene.getObjectByName("R_Shoulder");					var abs =  scene.getObjectByName("Abs");					var lumbar =  scene.getObjectByName("Lumbar");					var chestJoint =  scene.getObjectByName("JointChest");					var l_wrist =  scene.getObjectByName("L_Wrist");					var l_elbow =  scene.getObjectByName("L_Elbow");					var l_glute =  scene.getObjectByName("L_Glute");					var r_glute =  scene.getObjectByName("R_Glute");					var l_shoulder =  scene.getObjectByName("L_Shoulder");						var l_pec =  scene.getObjectByName("L_Pec");					var r_pec =  scene.getObjectByName("R_Pec");										var groin =  scene.getObjectByName("Groin");					var r_thigh =  scene.getObjectByName("R_Thigh");					var r_leg =  scene.getObjectByName("R_Leg");					var r_foot =  scene.getObjectByName("R_Foot");					var l_foot =  scene.getObjectByName("L_Foot");					var l_leg =  scene.getObjectByName("L_Leg");					var l_thigh =  scene.getObjectByName("L_Thigh");					var r_hand =  scene.getObjectByName("R_Hand");					var r_triceps =  scene.getObjectByName("R_Triceps");					var r_biceps =  scene.getObjectByName("R_Biceps");					var stomach =  scene.getObjectByName("Stomach");					var chest =  scene.getObjectByName("Chest");					var breast =  scene.getObjectByName("Breast");					var r_pecs =  scene.getObjectByName("R_Pecs");					var l_hand =  scene.getObjectByName("L_Hand");					var l_triceps =  scene.getObjectByName("L_Triceps");					var l_biceps =  scene.getObjectByName("L_Biceps");					var l_pecs =  scene.getObjectByName("L_Pecs");										var joints = [neck, r_hip, r_knee,r_ankle,l_ankle,l_knee,l_hip,r_wrist,r_elbow,abs,lumbar,l_wrist,l_elbow,					l_glute,r_glute,l_shoulder,l_pec,r_pec,r_shoulder,chestJoint];										var body = [groin,r_thigh,r_leg,r_foot,l_foot,l_leg,l_thigh,r_hand,r_triceps,r_biceps,stomach,chest,breast,r_pecs,l_hand,l_triceps,l_biceps,					head,l_pecs];										var jointmat =  new THREE.MeshPhongMaterial( {						specular: 0,						reflectivity: 0,						shininess: 0,						shading: THREE.SmoothShading,						shininess: 0,						reflectivity: 1,					} );										var bodymat =  new THREE.MeshPhongMaterial( {						specular: 0,						reflectivity: 0,						shininess: 0,						shading: THREE.SmoothShading,					} );										var jointcolor= document.getElementById('jointcolor').value;										if(jointcolor.length >= 1){						while(jointcolor.charAt(0) === '#'){							jointcolor = jointcolor.substr(1);						}												jointcolor = "0x"+jointcolor;					}										var bodycolor= document.getElementById('bodycolor').value;										if(bodycolor.length >= 1){						while(bodycolor.charAt(0) === '#'){							bodycolor = bodycolor.substr(1);						}						bodycolor = "0x"+bodycolor;					}										for(var i = 0 ; i< joints.length; i++){						joints[i].material.specular = jointmat.specular;						joints[i].position.y+=0.05;						joints[i].position.z+=0.8;						joints[i].position.x+=0.1;						joints[i].material.shininess = jointmat.shininess;						joints[i].material.map = null;							joints[i].material.reflectivity = jointmat.reflectivity;												if(joints[i].material.map == null ){														if(jointcolor !="" ){								joints[i].material.color.setHex(jointcolor);								}							else{								joints[i].material.color.setHex(0xffffff);							}						}					}										for(var i = 0 ; i< body.length; i++){						body[i].position.y+=0.05;						body[i].position.z+=0.8;						body[i].position.x+=0.1;						body[i].material.color.setHex(0xffffff);						body[i].material.specular = jointmat.specular;						body[i].material.reflectivity = jointmat.reflectivity;						body[i].material.shininess = jointmat.shininess;						body[i].material.map = null;							body[i].material.reflectivity = jointmat.reflectivity;												if(body[i].material.map == null ){														if(bodycolor !="" ){								body[i].material.color.setHex(bodycolor);								}							else{								body[i].material.color.setHex(0xffffff);							}						}					}										}else{					var specularShininess = Math.pow( 2, 1 * 10 );										var jointmat =  new THREE.MeshPhongMaterial( {						specular: 0,						shininess: 0,						shading: THREE.SmoothShading,						reflectivity: 0.5,						shininess: 0,											} );										var bodymat =  new THREE.MeshPhongMaterial( {						specular: 0,						reflectivity: 0,						shininess: 0,						shading: THREE.SmoothShading,					} );										var jointcolor= document.getElementById('jointcolor').value;										if(jointcolor.length >= 1){						while(jointcolor.charAt(0) === '#'){							jointcolor = jointcolor.substr(1);						}						jointcolor = "0x"+jointcolor;					}										head.position.y+=0.05;					head.position.z+=0.05;					head.position.x+=0.1;					head.material.color.setHex(0xffffff);					head.material.specular = jointmat.specular;					head.material.reflectivity = jointmat.reflectivity;					head.material.shininess = jointmat.shininess;					head.material.map = null;											neck.material.specular = jointmat.specular;					neck.position.y+=0.05;					neck.position.z+=0.05;					neck.position.x+=0.1;					neck.material.reflectivity = jointmat.reflectivity;										if(neck.material.map == null ){						if(jointcolor !="" ){							neck.material.color.setHex(jointcolor);							}						else{							neck.material.color.setHex(0xffffff);						}					}				}								<?php 	echo 'var userid = "'.$row["user_id"].'";'; ?>				<?php 	echo 'var postid = "'.$row["id"].'";'; ?>									var filesrc = 'uploads/'+userid+'/'+postid+'/';				var tgaloader = new THREE.TGALoader();								<?php 					foreach($bodyParts as $body){						if(file_exists('uploads/'.$row['user_id'].'/'.$row['id'].'/'.$body->target_name.'.'.$row[$body->rowName]))						{							if($row[$body->rowName]=="tga"){								echo 'var texturesrc = filesrc+"'.$body->target_name.'.'.$row[$body->rowName].'";';								echo 'var texture = tgaloader.load(texturesrc);';								}else{								echo 'var texturesrc = filesrc+"'.$body->target_name.'.jpg";';								echo 'var texture = new THREE.TextureLoader().load(texturesrc);';							}							echo 'texture.magFilter = THREE.NearestFilter;';							echo 'texture.minFilter = THREE.NearestFilter;';							echo $body->target_name.'.material.map = texture;';						}					}										foreach($jointParts as $joint){						if(file_exists('uploads/'.$row['user_id'].'/'.$row['id'].'/'.$joint->target_name.'.'.$row[$joint->rowName]))						{							if($row[$joint->rowName]=="tga"){								echo 'var texturesrc = filesrc+"'.$joint->target_name.'.'.$row[$joint->rowName].'";';								echo 'var texture = tgaloader.load(texturesrc);';								}else{								echo 'var texturesrc = filesrc+"'.$joint->target_name.'.jpg";';								echo 'var texture = new THREE.TextureLoader().load(texturesrc);';							}							echo 'texture.magFilter = THREE.NearestFilter;';							echo 'texture.minFilter = THREE.NearestFilter;';							echo $joint->target_name.'.material.map = texture;';						}					}				?>								var headneck = new THREE.Group();				<?php 					if(file_exists('uploads/'.$row["user_id"].'/'.$row["id"].'/head.'.$row["headtexture"])){					?>					if(loadcounter >=38 ){						if(isHeadTexture ==1 ){														scene.remove(r_hip, r_knee,r_ankle,l_ankle,l_knee,l_hip,r_wrist,r_elbow,abs,lumbar,l_wrist,l_elbow,							l_glute,r_glute,l_shoulder,l_pec,r_pec,r_shoulder,chestJoint,groin,r_thigh,r_leg,r_foot,l_foot,l_leg,l_thigh,r_hand,r_triceps,r_biceps,stomach,chest,breast,r_pecs,l_hand,l_triceps,l_biceps,							l_pecs);														camera.position.set(camera.position.x, camera.position.y-5.5, camera.position.z+5.5);														headneck.add( head );							headneck.add( neck );							scene.add( headneck );														var box = new THREE.Box3().setFromObject( headneck );							box.getCenter( headneck.position );														headneck.position.multiplyScalar( - 1 );							var pivot = new THREE.Group();														scene.add( pivot );							pivot.add( headneck );														controls.target.set(headneck.position.x,headneck.position.y+1,headneck.position.z-0.7)							controls.update();														animate();						}						}else{						for(var i = 0 ; i< body.length; i++){							if(body[i].material.map == null){								if(bodycolor !="" ){									body[i].material.color.setHex(bodycolor);																	}								else{									body[i].material.color.setHex(0xffffff);																	}								}else{								body[i].material.color.setHex(0xffffff);															}													}  					}				<?php } ?>								function animate() {					requestAnimationFrame(animate);					renderer.render(scene, camera);					renderhead();				}								function renderhead() {					if(!isMouseDown){						pivot.rotation.y += 0.02;					}				}			} );		}	}			function rotateObject(object,degreeX=0, degreeY=0, degreeZ=0){				degreeX = (degreeX * Math.PI)/180;		degreeY = (degreeY * Math.PI)/180;		degreeZ = (degreeZ * Math.PI)/180;				object.rotateX(degreeX);		object.rotateY(degreeY);		object.rotateZ(degreeZ);	}</script></body></html>