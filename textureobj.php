<?php 	include 'includes/session.php';?><!DOCTYPE html><html lang="en">	<head>		<?php include 'includes/links.php'; ?>				<style>			#info {			color: #ffffff;			position: absolute;			top: 90%;			width: 100%;			text-align: center;			z-index: 100;			display: block;			}						body {			font-family: Helvetica, Arial, sans-serif;			font-size: 12px;			margin: 0px;			overflow: hidden;			background-size: cover;			background: #70bg32;			background-repeat: no-repeat;			background: linear-gradient(to bottom,  #272928 50%,#272928 82%); 			margin: 0px;			overflow-x: hidden;			}						#visible-input{			width: 150px;			height: 20px;			font-family: Helvetica, Arial, sans-serif;			}						@media (max-width:768px) {			.form {			display:none;			}			}					</style>			</head>	<body>		<script src="build/three.min.js"></script>		<script src="js/controls/OrbitControls.js"></script>		<script src="js/loaders/TGALoader.js"></script>		<script src="js/loaders/OBJLoader.js"></script>				<?php include 'includes/header.php'; ?>				<?php			require('includes/config.php');						$getid = $_GET['id'];						$stmt =  $conn->prepare("select * from images WHERE id= :getid");			$stmt->bindValue(':getid', $getid);			$stmt->execute();			$result = $stmt->fetchAll();						$count_stmt  = $conn->prepare("UPDATE images SET views = views + 1 WHERE id= :getid");			$count_stmt->bindValue(':getid', $getid);			$count_stmt->execute();						$count_result= $count_stmt->fetchAll();						foreach ($result as $row)  {				$current_counts = $row['views'];				$new_count = $current_counts +1;			}						echo"<input type='hidden' name='jointcolor' id='jointcolor' value=".$row['jointcolor'].">";			echo"<input type='hidden' name='bodycolor' id='bodycolor' value=".$row['bodycolor'].">";			echo"<input type='hidden' name='textureid' id='textureid' value=".$_GET['id'].">";						$title = htmlspecialchars($row["title"], ENT_QUOTES, 'UTF-8');			$artist = htmlspecialchars($row["artist"], ENT_QUOTES, 'UTF-8');			$textureArtist = htmlspecialchars($row["textureArtist"], ENT_QUOTES, 'UTF-8');						$userid = $row["user_id"];			$postid = $row["id"];		?>				<div class="login-page textureinfo">			<div class="form">				<form class="login-form" method ="post" enctype = "multipart/form-data" >					<?php						$sqlurl = $row["image"];												if (substr($sqlurl, 0, 3) != 'dat'){							$sqlurl = "data:image;base64,".$row["image"];						}												$headflaturl = "data:image;base64,".$row["headtexture"];						list($width, $height) = getimagesize($headflaturl);												echo"<h2> <span class='yellowtxt' id='h2title'>".$title."</span></h2>";						echo"<p class='message' id='h2artist'>Created by: ".$textureArtist."</br></p>";						echo"<input type='hidden' name='title' id='title' value=".$title .">";						echo"<input type='hidden' name='artist' id='artist' value=".$artist .">";						?>					</br>					<div class="texturescrollbar" id="style-2">						<?php							$textureid = (int)$_GET['id'];							if (isset($_SESSION['Username'])) {								$userid = $_SESSION['user_id'];								$checkfields =  $conn->prepare("SELECT * 								FROM texture_favs								WHERE user =:userid								AND texture =:textureid");								$checkfields->bindValue(':userid', $userid);								$checkfields->bindValue(':textureid', $textureid);								$checkfields->execute();								$count = $checkfields->rowCount();																if($userid== $row["user_id"]){								?>								<button type="button" class="btn btn btn-primary"  onclick="editTexture()"><i  aria-hidden="true"></i> Edit</button>								<button type="button" class="btn"  onclick="deleteTexture()"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</button>  </br></br>								<?php									}								if ($checkfields->rowCount() == 0) {								?>								<a href="favourite.php?type=texture&id=<?php echo $getid?>" class="btn btn-block btn-primary btn-warning"><i class="fa fa-star-o" aria-hidden="true"></i> Add to Favourites</a>								<?php									}else{								?>	<a href="favourite.php?type=texture&id=<?php echo $getid?>" class="btn btn-block  btn-default"><i class="fa fa-check" aria-hidden="true"></i> Favourited</a>								<?php								}							}						?>						<br />						<p id="demo"></p>						<span class="greytxt pageheading2">Details</span>						<table class="table">							<thead>								<tr>									<th></th>									<th></th>								</tr>							</thead>							<tbody>								<tr>									<td>Created by </td>									<td><?php echo $textureArtist; ?></td>								</tr>								<td>Uploaded by </td>								<td><?php echo $artist; ?></td>							</tr>							<tr>								<td>Submitted on </td>								<td><?php echo $row["UploadDate"]; ?></td>							</tr>						</tbody>					</table>					Forum Code:					<input type="text" id="visible-input" value="[texturepreview='500']<?php echo $getid?>[/texturepreview]"size="2"/>					<button type="button" onclick="copyBBCode()" id="visible-button" >Copy</button>										<br><br>					<span class="greytxt pageheading2">Stats</span>					<table class="table">						<thead>							<tr>								<th> </th>								<th></th>							</tr>						</thead>						<tbody>							<tr>								<td>views</td>								<td><?php echo $row["views"]; ?></td>							</tr>							<tr>								<?php 									$countfields =  $conn->prepare("SELECT * 									FROM texture_favs									WHERE texture =:textureid");									$countfields->bindValue(':textureid', $textureid);									$countfields->execute();									$count = $countfields->rowCount();								?>								<td>favourites</td>								<td><?php echo 	$count ?> </td>							</tr>							<?php if($row["sharing"]=="public"){ ?>								<tr>									<td>downloads</td>									<td><?php echo $row["downloads"] ?></td>								</tr>							<?php } ?>						</tbody>					</table>				</div>							</form>		</div>	</div>	<div id="result"></div></div><script>	function editTexture(articleId) {		window.location = "edittexture.php?id=<?php echo $getid?>"	}		function deleteTexture() {		var txt;		var r = confirm("Are you sure?");		if (r == true) {			window.location = "deletetexture.php?id=<?php echo $getid?>"			} else {		}	}		function copyBBCode() {		var copyText = document.getElementById("visible-input");		copyText.select();		document.execCommand("Copy");	}</script><script>		var container;		var camera, raycaster, scene, renderer;		var mouseX = 0, mouseY = 0;			var windowHalfX = window.innerWidth / 2;	var windowHalfY = window.innerHeight / 2;		var mouse = new THREE.Vector2(), INTERSECTED;	var radius = 10, theta = 0;		var bodyPartsArr = [];			init();	animate();			function init() {				container = document.createElement( 'div' );		document.body.appendChild( container );				// camera		camera = new THREE.PerspectiveCamera( 30, window.innerWidth / window.innerHeight, 1, 10000 );						// scene				scene = new THREE.Scene();				var ambient = new THREE.AmbientLight( 0x101030 );		scene.add( ambient );				var directionalLight = new THREE.DirectionalLight( 0xffeedd );		directionalLight.position.set( 0, 0, 1 );		scene.add( directionalLight );				// texture				var manager = new THREE.LoadingManager();		manager.onProgress = function ( item, loaded, total ) {						console.log( item, loaded, total );					};				var texture = new THREE.Texture();				var onProgress = function ( xhr ) {			if ( xhr.lengthComputable ) {				var percentComplete = xhr.loaded / xhr.total * 100;				console.log( Math.round(percentComplete, 2) + '% downloaded' );			}		};				var onError = function ( xhr ) {		};										var mat =  new THREE.MeshPhongMaterial( {			specular: 0,			reflectivity: 0,			shininess: 0,			shading: THREE.SmoothShading,			shininess: 0,			reflectivity: 1,		} );						// model				var loader = new THREE.OBJLoader( manager );		loader.load( 'bodyparts.obj', function ( object ) {						object.traverse( function ( child ) {								if ( child instanceof THREE.Mesh ) {										//child.material.map = texture;					//child.material.color.setHex( 0xffffff );					child.material.shading = THREE.SmoothShading;					bodyPartsArr.push( child );				}							} );						scene.add( object );						function bodyPart(bodyid, bodyname, bodyGeom) {				this.bodyid = bodyid;				this.bodyname = bodyname;				this.bodyGeom = bodyGeom;			}						function jointPart(jointid, jointname, jointGeom) {				this.jointid = jointid;				this.jointname = jointname;				this.jointGeom = jointGeom;			}						var head = new bodyPart(0, "HEAD", scene.getObjectByName("head_pSphere1"));			var breast = new bodyPart(1, "BREAST", scene.getObjectByName("breast_pCube1"));			var chest = new bodyPart(2, "CHEST", scene.getObjectByName("chest_pCube1.001"));			var stomach = new bodyPart(3, "STOMACH", scene.getObjectByName("stomach_pCube1.015"));			var thorax  = new bodyPart(4, "GROIN", scene.getObjectByName("groin_pCube1.002"));			var r_pecs  = new bodyPart(5, "R_PECS", scene.getObjectByName("r_pecs_pCube1.013"));			var r_biceps  = new bodyPart(6, "R_BICEPS", scene.getObjectByName("r_biceps_pCube1.009"));			var r_triceps  = new bodyPart(7, "R_TRICEPS", scene.getObjectByName("r_triceps_pCube1.014"));			var l_pecs  = new bodyPart(8, "L_PECS", scene.getObjectByName("l_pecs_pCube1.007"));			var l_biceps  = new bodyPart(9, "L_BICEPS", scene.getObjectByName("l_biceps_pCube1.003"));			var l_triceps  = new bodyPart(10, "L_TRICEPS", scene.getObjectByName("l_triceps_pCube1.008"));			var r_hand  = new bodyPart(11, "R_HAND", scene.getObjectByName("r_hand_pCube1.012"));			var l_hand  = new bodyPart(12, "L_HAND", scene.getObjectByName("l_hand_pCube1.006"));			var r_butt  = new bodyPart(13, "R_BUTT", scene.getObjectByName("r_butt_pCube1.010"));			var l_butt  = new bodyPart(14, "L_BUTT", scene.getObjectByName("l_butt_pCube1.004"));			var r_thigh  = new bodyPart(15, "R_THIGH", scene.getObjectByName("r_thigh_pCylinder1.003"));			var l_thigh  = new bodyPart(16, "L_THIGH", scene.getObjectByName("l_thigh_pCylinder1.001"));			var l_leg  = new bodyPart(17, "l_LEG", scene.getObjectByName("l_leg_pCylinder1"));			var r_leg  = new bodyPart(18, "R_LEG", scene.getObjectByName("r_leg_pCylinder1.002"));			var r_foot  = new bodyPart(19, "R_FOOT", scene.getObjectByName("r_foot_pCube1.011"));			var l_foot  = new bodyPart(20, "L_FOOT", scene.getObjectByName("l_foot_pCube1.005"));						var bodyParts = [head, breast, chest, stomach, thorax, r_pecs, r_biceps, r_triceps, l_pecs, l_biceps, l_triceps, r_hand, l_hand, 			r_butt, l_butt, r_thigh, l_thigh, l_leg, r_leg, r_foot, l_foot];						head.bodyGeom.position.set(1, 0.40000003576279, 2.5900001525879);			head.bodyGeom.scale.set(0.20000000298023, 0.20000000298023, 0.20000000298023);						breast.bodyGeom.position.set(1, 0.44999998807907, 2.1400001049042);			breast.bodyGeom.scale.set(0.20000000298023, 0.10000000149012, 0.30000001192093);						chest.bodyGeom.position.set(1, 0.44999998807907, 1.8900001049042);			chest.bodyGeom.scale.set(0.5, 0.15000000596046, 0.20000000298023);						stomach.bodyGeom.position.set(1, 0.5, 1.6900000572205);			stomach.bodyGeom.scale.set(0.34999999403954, 0.15000000596046, 0.20000000298023);						thorax.bodyGeom.position.set(1, 0.55000001192093, 1.4900000095367);			thorax.bodyGeom.scale.set(0.20000000298023, 0.15000000596046, 0.20000000298023);						r_pecs.bodyGeom.position.set(0.75, 0.44999998807907, 2.0900001525879);			r_pecs.bodyGeom.scale.set(0.20000000298023, 0.15000000596046, 0.20000000298023);						r_biceps.bodyGeom.position.set(0.44999998807907, 0.44999998807907, 2.2400000095367);			r_biceps.bodyGeom.scale.set(0.40000000596046, 0.20000000298023, 0.20000000298023);						r_triceps.bodyGeom.position.set( 0.050000000745058, 0.44999998807907, 2.2400000095367);			r_triceps.bodyGeom.scale.set(0.40000000596046, 0.10000000149012, 0.10000000149012);						l_pecs.bodyGeom.position.set(1.25, 0.44999998807907, 2.0900001525879);			l_pecs.bodyGeom.scale.set(0.20000000298023, 0.15000000596046, 0.20000000298023);						l_biceps.bodyGeom.position.set(1.5499999523163, 0.44999998807907, 2.2400000095367);			l_biceps.bodyGeom.scale.set(0.40000000596046, 0.20000000298023, 0.20000000298023);						l_triceps.bodyGeom.position.set(1.9500000476837, 0.44999998807907, 2.2400000095367);			l_triceps.bodyGeom.scale.set(0.40000000596046, 0.10000000149012, 0.10000000149012);						r_hand.bodyGeom.position.set(-0.34999999403954, 0.39999997615814, 2.2400000095367);			r_hand.bodyGeom.scale.set(0.21999999880791, 0.21999999880791, 0.21999999880791);						l_hand.bodyGeom.position.set(2.3499999046326, 0.39999997615814, 2.2400000095367);			l_hand.bodyGeom.scale.set(0.21999999880791, 0.21999999880791, 0.21999999880791);						r_butt.bodyGeom.position.set(0.80000001192093, 0.55000001192093, 1.3900001049042);			r_butt.bodyGeom.scale.set(0.10000000149012, 0.10000000149012, 0.10000000149012);						l_butt.bodyGeom.position.set(1.2000000476837, 0.55000001192093, 1.3900001049042);			l_butt.bodyGeom.scale.set(0.10000000149012, 0.10000000149012, 0.10000000149012);						r_thigh.bodyGeom.position.set(0.80000001192093, 0.55000001192093, 1.0400000810623);			r_thigh.bodyGeom.scale.set(0.11999999731779, 0.11999999731779, 0.30000001192093);						l_thigh.bodyGeom.position.set(1.2000000476837, 0.55000001192093, 1.0400000810623);			l_thigh.bodyGeom.scale.set(0.11999999731779, 0.11999999731779, 0.30000001192093);						l_leg.bodyGeom.position.set(1.2000000476837, 0.55000001192093, 0.43999999761581);			l_leg.bodyGeom.scale.set(0.12999999523163, 0.12999999523163, 0.30000001192093);						r_leg.bodyGeom.position.set(0.80000001192093, 0.55000001192093, 0.43999999761581);			r_leg.bodyGeom.scale.set(0.12999999523163, 0.12999999523163, 0.30000001192093);						r_foot.bodyGeom.position.set(0.80000001192093, 0.44999998807907, 0.03999999910593);			r_foot.bodyGeom.scale.set(0.20000000298023, 0.5, 0.079999998211861);						l_foot.bodyGeom.position.set(1.2000000476837, 0.44999998807907, 0.03999999910593);			l_foot.bodyGeom.scale.set(0.20000000298023, 0.5, 0.079999998211861);						var j_neck = new jointPart(0, "NECK", head.bodyGeom.clone());			var j_chest = new jointPart(1, "CHEST", head.bodyGeom.clone());			var j_lumbar = new jointPart(2, "LUMBAR", head.bodyGeom.clone());			var j_abs = new jointPart(3, "ABS", head.bodyGeom.clone());			var j_r_pecs = new jointPart(4, "R_PECS", head.bodyGeom.clone());			var j_r_shoulder = new jointPart(5, "R_SHOULDER", head.bodyGeom.clone());			var j_r_elbow = new jointPart(6, "R_ELBOW", head.bodyGeom.clone());			var j_l_pecs = new jointPart(7, "L_PECS", head.bodyGeom.clone());			var j_l_shoulder = new jointPart(8, "L_SHOULDER", head.bodyGeom.clone());			var j_l_elbow = new jointPart(9, "L_ELBOW", head.bodyGeom.clone());			var j_r_wrist = new jointPart(10, "R_WRIST", head.bodyGeom.clone());			var j_l_wrist = new jointPart(11, "L_WRIST", head.bodyGeom.clone());			var j_r_glute = new jointPart(12, "R_GLUTE", head.bodyGeom.clone());			var j_l_glute = new jointPart(13, "L_GLUTE", head.bodyGeom.clone());			var j_r_hip = new jointPart(14, "R_HIP", head.bodyGeom.clone());			var j_l_hip = new jointPart(15, "L_HIP", head.bodyGeom.clone());			var j_r_knee = new jointPart(16, "R_KNEE", head.bodyGeom.clone());			var j_l_knee = new jointPart(17, "L_KNEE", head.bodyGeom.clone());			var j_r_ankle = new jointPart(18, "R_ANKLE", head.bodyGeom.clone());			var j_l_ankle = new jointPart(19, "L_ANKLE", head.bodyGeom.clone());						var jointParts = [j_neck, j_chest, j_lumbar, j_abs, j_r_pecs, j_r_shoulder, j_r_elbow, j_l_pecs, j_l_shoulder, j_l_elbow, 			j_r_wrist, j_l_wrist, j_r_glute, j_l_glute, j_r_hip, j_l_hip, j_r_knee, j_l_knee, j_r_ankle, j_l_ankle, ];						j_neck.jointGeom.position.set(1, 0.44999998807907, 2.4400000572205);						j_neck.jointGeom.scale.set(0.10999999940395, 0.10999999940395, 0.10999999940395);						j_chest.jointGeom.position.set(1, 0.44999998807907, 1.9900000095367);			j_chest.jointGeom.scale.set(0.18000000715256, 0.18000000715256, 0.18000000715256);						j_lumbar.jointGeom.position.set( 1, 0.5, 1.7900000810623);			j_lumbar.jointGeom.scale.set(0.15999999642372, 0.15999999642372, 0.15999999642372);						j_abs.jointGeom.position.set(1, 0.55000001192093, 1.5900000333786);			j_abs.jointGeom.scale.set(0.14000000059605, 0.14000000059605, 0.14000000059605);						j_r_pecs.jointGeom.position.set(0.85000002384186, 0.40000003576279, 2.1400001049042);			j_r_pecs.jointGeom.scale.set(0.18000000715256, 0.18000000715256, 0.18000000715256);						j_r_shoulder.jointGeom.position.set(0.64999997615814, 0.44999998807907, 2.2400000095367);			j_r_shoulder.jointGeom.scale.set(0.18000000715256, 0.18000000715256, 0.18000000715256);						j_r_elbow.jointGeom.position.set(0.25, 0.44999998807907, 2.2400000095367);			j_r_elbow.jointGeom.scale.set(0.15999999642372, 0.15999999642372, 0.15999999642372);						j_l_pecs.jointGeom.position.set(1.1499999761581, 0.40000003576279, 2.1400001049042);			j_l_pecs.jointGeom.scale.set(0.18000000715256, 0.18000000715256, 0.18000000715256);						j_l_shoulder.jointGeom.position.set(1.3500000238419, 0.44999998807907, 2.2400000095367);			j_l_shoulder.jointGeom.scale.set(0.18000000715256, 0.18000000715256, 0.18000000715256);						j_l_elbow.jointGeom.position.set(1.75, 0.44999998807907, 2.2400000095367);			j_l_elbow.jointGeom.scale.set(0.15999999642372, 0.15999999642372, 0.15999999642372);						j_r_wrist.jointGeom.position.set(-0.20000000298023, 0.44999998807907, 2.2400000095367);			j_r_wrist.jointGeom.scale.set(0.10999999940395, 0.10999999940395, 0.10999999940395);						j_l_wrist.jointGeom.position.set( 2.2000000476837, 0.44999998807907, 2.2400000095367);			j_l_wrist.jointGeom.scale.set(0.10999999940395, 0.10999999940395, 0.10999999940395);						j_r_glute.jointGeom.position.set( 0.89999997615814, 0.65000003576279, 1.4500000476837);			j_r_glute.jointGeom.scale.set(0.15999999642372, 0.15999999642372, 0.15999999642372);						j_l_glute.jointGeom.position.set(1.1000000238419, 0.65000003576279, 1.4500000476837);			j_l_glute.jointGeom.scale.set(0.15999999642372, 0.15999999642372, 0.15999999642372);						j_r_hip.jointGeom.position.set(0.79000002145767, 0.55000001192093, 1.3400000333786);			j_r_hip.jointGeom.scale.set(0.15999999642372, 0.15999999642372, 0.15999999642372);						j_l_hip.jointGeom.position.set(1.210000038147, 0.55000001192093, 1.3400000333786);			j_l_hip.jointGeom.scale.set(0.15999999642372, 0.15999999642372, 0.15999999642372);						j_r_knee.jointGeom.position.set(0.80000001192093, 0.55000001192093, 0.74000000953674);			j_r_knee.jointGeom.scale.set(0.14000000059605, 0.14000000059605, 0.14000000059605);						j_l_knee.jointGeom.position.set(1.2000000476837, 0.55000001192093, 0.74000000953674);			j_l_knee.jointGeom.scale.set(0.14000000059605, 0.14000000059605, 0.14000000059605);						j_r_ankle.jointGeom.position.set(0.80000001192093, 0.59999996423721, 0.18999999761581);			j_r_ankle.jointGeom.scale.set(0.10999999940395, 0.10999999940395, 0.10999999940395);						j_l_ankle.jointGeom.position.set(1.2000000476837, 0.59999996423721, 0.18999999761581);			j_l_ankle.jointGeom.scale.set(0.10999999940395, 0.10999999940395, 0.10999999940395);						for (var i = 0; i < jointParts.length; i++) {								scene.add( jointParts[i].jointGeom);				jointParts[i].jointGeom.name = jointParts[i].jointname;				jointParts[i].jointGeom.material = new THREE.MeshPhongMaterial(  );			}				<?php				class ToriPart {					public function __construct($Files, $rowName, $target_name) {						$this->Files = $Files;						$this->target_name = $target_name;						$this->rowName = $rowName;					}				}								$head = new ToriPart("head_pSphere1", "headtexture", "head");				$groin = new ToriPart("groin_pCube1.002", "grointexture", "thorax");				$r_thigh = new ToriPart("r_thigh_pCylinder1.003", "r_thightexture", "r_thigh");				$r_leg = new ToriPart("r_leg_pCylinder1.002", "r_legtexture", "r_leg");				$r_foot = new ToriPart("r_foot_pCube1.011", "r_foottexture", "r_foot");				$l_foot = new ToriPart("l_foot_pCube1.005", "l_foottexture", "l_foot");				$l_leg = new ToriPart("l_leg_pCylinder1", "l_legtexture", "l_leg");				$l_thigh = new ToriPart("l_thigh_pCylinder1.001", "l_thightexture", "l_thigh");				$r_triceps = new ToriPart("r_triceps_pCube1.014", "r_tricepstexture", "r_triceps");				$r_hand = new ToriPart("r_hand_pCube1.012", "r_handtexture", "r_hand");				$r_biceps = new ToriPart("r_biceps_pCube1.009", "r_bicepstexture", "r_biceps");				$stomach = new ToriPart("stomach_pCube1.015", "stomachtexture", "stomach");				$chest = new ToriPart("hest_pCube1.001", "chesttexture", "chest");				$breast = new ToriPart("breast_pCube1", "breasttexture", "breast");				$r_pecs = new ToriPart("r_pecs_pCube1.013", "r_pecstexture", "r_pecs");						$l_hand = new ToriPart("l_hand_pCube1.006", "l_handtexture", "l_triceps");				$l_triceps = new ToriPart("l_triceps_pCube1.008", "l_tricepstexture");				$l_biceps = new ToriPart("l_biceps_pCube1.003", "l_bicepstexture", "l_biceps");				$l_pecs = new ToriPart("l_pecs_pCube1.007", "l_pecstexture", "l_pecs");								$l_knee = new ToriPart("L_KNEE", "l_kneetexture");				$l_glute = new ToriPart("L_GLUTE", "l_glutetexture");				$l_hip = new ToriPart("L_HIP", "l_hiptexture");				$r_hip = new ToriPart("R_HIP", "r_hiptexture");				$r_knee = new ToriPart("R_KNEE", "r_hiptexture");				$r_glute = new ToriPart("R_GLUTE", "r_glutetexture");				$l_ankle = new ToriPart("L_ANKLE", "l_ankletexture");				$r_ankle = new ToriPart("R_ANKLE", "r_ankletexture");				$l_wrist = new ToriPart("L_WRIST", "l_wristtexture");				$r_wrist = new ToriPart( "R_WRIST", "r_wristtexture");				$l_elbow = new ToriPart("L_ELBOW", "l_elbowtexture");				$l_shoulder = new ToriPart("L_SHOULDER", "l_shouldertexture");				$r_shoulder = new ToriPart( "R_SHOULDER", "r_shouldertexture");				$r_elbow = new ToriPart("R_ELBOW", "r_elbowtexture");				$r_pec = new ToriPart("R_PEC", "r_pectexture");				$l_pec = new ToriPart("L_PEC", "l_pectexture");				$abs = new ToriPart("ABS", "abstexture");				$lumbar = new ToriPart("LUMBAR", "lumbartexture");				$chestJoint = new ToriPart("CHEST", "chestjointtexture");				$neck = new ToriPart("NECK", "necktexture");								$bodyParts = array($groin,$r_thigh,$r_leg,$r_foot,$l_foot,$l_leg,$l_thigh,$r_hand,$r_triceps,$r_biceps,$stomach,$chest,$breast,$r_pecs,$l_hand,$l_triceps,$l_biceps,				$head,$l_pecs);								$jointParts = array($neck,$r_hip,$r_knee,$r_ankle,$l_ankle,$l_knee,$l_hip,$r_wrist,$r_elbow,$abs,$lumbar,$l_wrist,$l_elbow,$l_glute,				$r_glute,$l_shoulder,$l_pec,$r_pec,$r_shoulder,$chestJoint);								echo 'var userid = "'.$row["user_id"].'"; '; 				echo 'var postid = "'.$row["id"].'"; '; 								?>				var filesrc = 'uploads/'+userid+'/'+postid+'/';				var tgaloader = new THREE.TGALoader();								<?php 					foreach($bodyParts as $body){    //echo '<script type="text/javascript">alert("' . 'uploads/'.$row['user_id'].'/'.$row['id'].'/'.$body->target_name.'.'.$row[$body->rowName] . '")</script>';							//echo $body->target_name.'.material.color.setHex(0xff0000); ';						if(file_exists('uploads/'.$row['user_id'].'/'.$row['id'].'/'.$body->target_name.'.'.$row[$body->rowName]))						{							if($row[$body->rowName]=="tga"){								echo 'var texturesrc = filesrc+"'.$body->target_name.'.'.$row[$body->rowName].'";';								echo 'vartexture = tgaloader.load(texturesrc);';								}else{																echo 'var texturesrc = filesrc+"'.$body->target_name.'.jpg"; ';								echo 'var texture = new THREE.TextureLoader().load(texturesrc); ';							}							echo 'texture.magFilter = THREE.NearestFilter; ';							echo 'texture.minFilter = THREE.NearestFilter; ';							echo $body->target_name.'.bodyGeom.material.map = texture; ';						}					}										foreach($jointParts as $joint){						if(file_exists('uploads/'.$row['user_id'].'/'.$row['id'].'/'.$joint->target_name.'.'.$row[$joint->rowName]))						{							if($row[$joint->rowName]=="tga"){								echo 'var texturesrc = filesrc+"'.$joint->target_name.'.'.$row[$joint->rowName].'";';								echo 'vartexture = tgaloader.load(texturesrc);';								}else{								echo 'var texturesrc = filesrc+"'.$joint->target_name.'.jpg";';								echo 'var texture = new THREE.TextureLoader().load(texturesrc);';							}							echo 'texture.magFilter = THREE.NearestFilter;';							echo 'texture.minFilter = THREE.NearestFilter;';							echo $joint->target_name.'.material.map = texture;';						}					}				?>																																																																											}, onProgress, onError );					//		raycaster = new THREE.Raycaster();				renderer = new THREE.WebGLRenderer( { antialias: true ,		preserveDrawingBuffer   : true  } );		renderer.setPixelRatio( window.devicePixelRatio );		renderer.setSize( window.innerWidth, window.innerHeight );		container.appendChild( renderer.domElement );				document.addEventListener( 'mousemove', onDocumentMouseMove, false );				//				window.addEventListener( 'resize', onWindowResize, false );			}	var controls = new THREE.OrbitControls( camera, renderer.domElement );			controls.target.set( 1, 0.44999998807907, 1.8900001049042 );	controls.update();		var size = 10;	var divisions = 10;		var gridHelper = new THREE.GridHelper( size, divisions );	//scene.add( gridHelper );		light = new THREE.HemisphereLight(0xddeeff, 0x0f0e0d,0.7)		shadowLight = new THREE.DirectionalLight(0xffffff, .6);	shadowLight.position.set(-100,-70, 200);	shadowLight.castShadow = true;		backLight = new THREE.DirectionalLight(0xffffff, .4);	backLight.position.set(100, -150, 50);	backLight.castShadow = true;		var hemilight = new THREE.HemisphereLight(0xffffff, 0xffffff,0.1)		scene.add(hemilight);	scene.add(backLight);	scene.add(light);	scene.add(shadowLight);		scene.background = null;		function onWindowResize() {				windowHalfX = window.innerWidth / 2;		windowHalfY = window.innerHeight / 2;				camera.aspect = window.innerWidth / window.innerHeight;		camera.updateProjectionMatrix();				renderer.setSize( window.innerWidth, window.innerHeight );			}		function onDocumentMouseMove( event ) {				//mouseX = ( event.clientX - windowHalfX ) / 2;		//mouseY = ( event.clientY - windowHalfY ) / 2;			}		//		function animate() {				requestAnimationFrame( animate );		render();			}	//alert(scene.getObjectByName( "head_pSphere1", true ));			function render() {				//camera.position.x += ( mouseX - camera.position.x ) * .05;		//camera.position.y += ( - mouseY - camera.position.y ) * .05;						renderer.render( scene, camera );		// find intersections		//if (skull){		raycaster.setFromCamera( mouse, camera );				var intersects = raycaster.intersectObjects( scene.children, true );				if ( intersects.length > 0 ) {						if ( INTERSECTED != intersects[ 0 ].object ) {								if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );								INTERSECTED = intersects[ 0 ].object;				INTERSECTED.currentHex = INTERSECTED.material.emissive.getHex();				//INTERSECTED.material.emissive.setHex( 0xff0000 );				//INTERSECTED.position.x+=1;				//alert(INTERSECTED.name);							}						} else {						if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );						INTERSECTED = null;		}			}	</script>		</script></body></html>